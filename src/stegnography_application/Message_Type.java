/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stegnography_application;

import javax.swing.JOptionPane;

/**
 *
 * @author Azmi
 */
public class Message_Type extends javax.swing.JFrame {

    
    //My Private Variables Declaration
    private static String messageType;
//    private static boolean TextFileIsSelected = false;
//    private static boolean ImageIsSelected = false;
//    private static boolean PdfFileIsSelected = false;
//    private static boolean EnterMessageIsSelected = false;
    //End Private Variables Declaration
    
    /**
     * Creates new form Message_Type
     */
    public Message_Type() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioButtonGroup = new javax.swing.ButtonGroup();
        PdfFile = new javax.swing.JRadioButton();
        jTextField1 = new javax.swing.JTextField();
        nextButton = new javax.swing.JButton();
        TextFile = new javax.swing.JRadioButton();
        Image = new javax.swing.JRadioButton();
        EnterMessage = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MESSAGE TYPE");

        radioButtonGroup.add(PdfFile);
        PdfFile.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        PdfFile.setText(" PDF FILE");

        jTextField1.setEditable(false);
        jTextField1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jTextField1.setText("CHOOSE ONE");
        jTextField1.setBorder(null);

        nextButton.setFont(new java.awt.Font("Arial", 1, 26)); // NOI18N
        nextButton.setText("NEXT");
        nextButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        radioButtonGroup.add(TextFile);
        TextFile.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        TextFile.setText(" TEXT FILE");

        radioButtonGroup.add(Image);
        Image.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        Image.setText(" IMAGE");

        radioButtonGroup.add(EnterMessage);
        EnterMessage.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        EnterMessage.setText(" MESSAGE ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(TextFile, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PdfFile, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(EnterMessage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                        .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Image, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(TextFile, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Image, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(PdfFile, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EnterMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        // TODO add your handling code here:
        if(TextFile.isSelected()){
            dispose();
//            set_TextFileIsSelected(TextFile.isSelected());
            setMessage_Type(TextFile.getText());//setting message type
            
            Select_Text_File select_text_file = new Select_Text_File();
            select_text_file.setVisible(true);
        }
        else if(Image.isSelected()){
            dispose();
//            set_ImageIsSelected(Image.isSelected());
            setMessage_Type(Image.getText());//setting message type
            
            Select_Image select_image = new Select_Image();
            select_image.setVisible(true);
        }
        else if(PdfFile.isSelected()){
            dispose();
//            set_PdfFileIsSelected(PdfFile.isSelected());
            setMessage_Type(PdfFile.getText());//setting message type
            
            Select_Pdf_File select_pdf_file = new Select_Pdf_File();
            select_pdf_file.setVisible(true);
        }
        else if(EnterMessage.isSelected()){
            dispose();
//            set_EnterMessageIsSelected(EnterMessage.isSelected());
            setMessage_Type(EnterMessage.getText());//setting message type
            
            Enter_Message enter_message = new Enter_Message();
            enter_message.setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(null, "Select Any One","MESSAGE TYPE NOT SELECTED",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Message_Type.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Message_Type.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Message_Type.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Message_Type.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Message_Type().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton EnterMessage;
    private javax.swing.JRadioButton Image;
    private javax.swing.JRadioButton PdfFile;
    private javax.swing.JRadioButton TextFile;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton nextButton;
    private javax.swing.ButtonGroup radioButtonGroup;
    // End of variables declaration//GEN-END:variables

    /**
     * Create setMessage_Type() method to set the type of the message
     */
    private void setMessage_Type(String text) {
        messageType = text;
    }
    
    /**
     * Create setMessage_Type() method to set the type of the message
     * @return 
     */
    public String getMessage_Type() {
        return messageType;
    }
    
    
//    /**
//     * Create setMessage_Type() method to set the type of the message
//     */
//    private void set_TextFileIsSelected(boolean selected) {
//        TextFileIsSelected = selected;
//    }
//    
//    /**
//     * Create setMessage_Type() method to set the type of the message
//     * @return 
//     */
//    public boolean get_TextFileIsSelected() {
//        return TextFileIsSelected;
//    }
//    
//
//    /**
//     * Create setMessage_Type() method to set the type of the message
//     */
//    private void set_ImageIsSelected(boolean selected) {
//        ImageIsSelected = selected;
//    }
//    
//    /**
//     * Create setMessage_Type() method to set the type of the message
//     * @return 
//     */
//    public boolean get_ImageIsSelected() {
//        return ImageIsSelected;
//    }
//    
//
//    /**
//     * Create set_PdfFileIsSelected() method to 
//     */
//    private void set_PdfFileIsSelected(boolean selected) {
//        PdfFileIsSelected = selected;
//    }
//    
//    /**
//     * Create setMessage_Type() method to set the type of the message
//     * @return 
//     */
//    public boolean get_PdfFileIsSelected() {
//        return PdfFileIsSelected;
//    }
//    
//
//    /**
//     * Create setMessage_Type() method to set the type of the message
//     */
//    private void set_EnterMessageIsSelected(boolean selected) {
//        EnterMessageIsSelected = selected;
//    }
//    /**
//     * Create setMessage_Type() method to set the type of the message
//     * @return 
//     */
//    public boolean get_EnterMessageIsSelected() {
//        return EnterMessageIsSelected;
//    }
}
